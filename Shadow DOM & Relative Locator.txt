shadow DOM:=
===============

Challenge-1:
=============
If elements are inside the Shadow DOM ,we can't automate.

Solution:
=========
https://mvnrepository.com/artifact/io.github.sukgu/automation
=============================================================
<dependency>
   <groupId>io.github.sukgu</groupId>
   <artifactId>automation</artifactId>
   <version>0.1.3</version>         
</dependency>

By using above Depenedency we can automate element ,eventhough elements are inside shadow DOM.

Practice URL:
===============
http://watir.com/examples/shadow_dom.html

Information:
============
1.https://titusfortner.com/2021/11/22/shadow-dom-selenium.html
2.https://stackoverflow.com/questions/55761810/how-to-automate-shadow-dom-elements-using-selenium

Sample Example:
=================
package org.example;

import io.github.bonigarcia.wdm.WebDriverManager;
import io.github.sukgu.Shadow;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.Test;

import java.time.Duration;

@Slf4j
public class ShadowDemoTest {
    WebDriver driver;
    @Test
    public void AutomateShadowElement(){
        try {
            WebDriverManager.chromedriver().setup();
            driver = new ChromeDriver();
            driver.manage().window().maximize();
            driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
            driver.get("http://watir.com/examples/shadow_dom.html");
            driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
            Shadow shadow = new Shadow(driver);
            WebElement element = shadow.findElementByXPath("//input[@type='text']");
            highlightElementWithBox(element,driver);
            element.sendKeys("Test Verification");
            driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
            WebElement element1 = shadow.findElementByXPath("//input[@type='checkbox']");
            highlightElementWithBox(element1,driver);
            element1.click();
            driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
            driver.quit();
        }
        catch (Exception e){
            log.error(e.getMessage(),e);
        }
    }

    public void highlightElementWithBox(WebElement element, WebDriver driver) {
        try {
//            elementClickableWait(driver,element);
            JavascriptExecutor js = (JavascriptExecutor) driver;
            js.executeScript("arguments[0].style.border='2px solid lightcoral'", element);
        } catch (Exception e) {
            log.error(e.getMessage());
            throw e;
        }
    }
}


Relative Locator:
==================
Relative locators allow us to locate the web elements based on their position with respect to other web elements.
It helps us to locate the web elements by its position by concerning other web elements such as above, below, toLeftOf, toRightOf, and near.

Information:
==============
https://www.selenium.dev/documentation/webdriver/elements/locators/#relative-locators

There are five locators newly added in Selenium 4:

above();
========
It is to locate a web element just above the specified element
Sample Example:
===============
By emailLocator = RelativeLocator.with(By.tagName("input")).above(By.id("password"));

below():
========
It is to locate a web element just below the specified element
Sample Example:
================
By passwordLocator = RelativeLocator.with(By.tagName("input")).below(By.id("email"));

toLeftOf():
===========
It is to locate a web element present on the left of a specified element
Sample Example:
===============
By cancelLocator = RelativeLocator.with(By.tagName("button")).toLeftOf(By.id("submit"));

toRightOf():
============
It is to locate a web element present on the right of a specified element
Sample Example:
===============
By submitLocator = RelativeLocator.with(By.tagName("button")).toRightOf(By.id("cancel"));

near():
========
It is to locate a web element at approx. 50 pixels away from a specified element. The distance can be passed as an argument to an overloaded method.
Sample Example:
===============
By emailLocator = RelativeLocator.with(By.tagName("input")).near(By.id("lbl-email"));

Sample URL:
===========
https://www.softwaretestingmaterial.com/
